VERFIY COMPONENT
// 'use client'
// import { useEffect, useState } from 'react'
// import { useSearchParams, useRouter } from 'next/navigation'
// import { createClientComponentClient } from '@supabase/auth-helpers-nextjs'

// export default function VerifyPage() {
//   const [verificationStatus, setVerificationStatus] = useState<'pending' | 'success' | 'error'>('pending')
//   const [message, setMessage] = useState('')
//   const searchParams = useSearchParams()
//   const router = useRouter()
//   const supabase = createClientComponentClient()

//   useEffect(() => {
//     const verifyToken = async () => {
//       const token = searchParams.get('token')
      
//       if (!token) {
//         setVerificationStatus('error')
//         setMessage('No verification token provided')
//         return
//       }

//       try {
//         // Call the verification function
//         const { data, error } = await supabase
//           .rpc('verify_signup', { verification_token: token })

//         if (error) throw error

//         if (data.success) {
//           setVerificationStatus('success')
//           setMessage(data.message)
//           // Redirect to login after 3 seconds
//           setTimeout(() => {
//             router.push('/login')
//           }, 3000)
//         } else {
//           setVerificationStatus('error')
//           setMessage(data.message)
//         }

//       } catch (error: any) {
//         setVerificationStatus('error')
//         setMessage(error.message)
//       }
//     }

//     verifyToken()
//   }, [searchParams, router, supabase])

//   return (
//     <div className="min-h-screen flex items-center justify-center bg-gray-50">
//       <div className="max-w-md w-full space-y-8 p-8 bg-white rounded-lg shadow">
//         <div className="text-center">
//           <h1 className="text-3xl font-bold">Email Verification</h1>
          
//           {verificationStatus === 'pending' && (
//             <div className="mt-4">
//               <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500 mx-auto"></div>
//               <p className="mt-4 text-gray-600">Verifying your email...</p>
//             </div>
//           )}

//           {verificationStatus === 'success' && (
//             <div className="mt-4">
//               <div className="text-green-500 text-6xl mb-4">✓</div>
//               <p className="text-green-600">{message}</p>
//               <p className="mt-2 text-gray-600">Redirecting to login...</p>
//             </div>
//           )}

//           {verificationStatus === 'error' && (
//             <div className="mt-4">
//               <div className="text-red-500 text-6xl mb-4">✗</div>
//               <p className="text-red-600">{message}</p>
//               <button
//                 onClick={() => router.push('/signup')}
//                 className="mt-4 text-blue-600 hover:text-blue-500"
//               >
//                 Back to Sign Up
//               </button>
//             </div>
//           )}
//         </div>
//       </div>
//     </div>
//   )
// }





MDILLWARE
 // Admin and SuperAdmin role access
  if (admin(req)) {
    if (["superAdmin", "admin"].includes(role)) {
      return NextResponse.next(); // Allow access
    } else {
      return NextResponse.redirect(new URL("/dashboard/users", req.url));
    }
  }

  // Prevent admin users from accessing `/dashboard/users`
  if (user(req) && ["superAdmin", "admin"].includes(role)) {
    return NextResponse.redirect(new URL("/dashboard/admin", req.url));
  }

  // Redirect non-admin users trying to access admin routes
  if (
    isAuthenticated &&
    !["superAdmin", "admin"].includes(role) &&
    admin(req)
  ) {
    return NextResponse.redirect(new URL("/dashboard/users", req.url));
  }

  // Allow non-admin users to access `/` and their dashboard
  if (isAuthenticated && !["superAdmin", "admin"].includes(role)) {
    if (user(req)) {
      return NextResponse.next(); // Allow user dashboard access
    }
    // Do not redirect from `/`
    if (url.pathname !== "/") {
      return NextResponse.redirect(new URL("/dashboard/users", req.url));
    }
  }



  // app/products/[id]/page.tsx
import { notFound } from 'next/navigation'
import { Product } from "../../../types/product"
import { useState } from "react"
import { useUser } from "@clerk/nextjs"
import Link from "next/link"

interface SingleProductPageProps {
    params: {
        id: string
    }
}

async function getProduct(id: string): Promise<Product | null> {
    // Dummy product data for development
    const product: Product = {
        id: id,
        name: "Sample Product",
        description: "This is a sample product description. It includes detailed information about the product features and benefits. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",
        image: "https://picsum.photos/800/600",
        category: "Software", 
        rating: 4.5,
        plan: "Premium",
        affiliateLink: "https://example.com",
        price: 2000,
        commission: 10,
        isLatest: false,
        isFeatured: false
    }
    return product
}

export default function SingleProductPage({ params }: SingleProductPageProps) {
    const { isSignedIn, user } = useUser()
    const [rating, setRating] = useState(0)
    const [comment, setComment] = useState("")
    const [showRatingForm, setShowRatingForm] = useState(false)
    const product = await getProduct(params.id)

    if (!product) {
        notFound()
    }

    const handleRatingSubmit = async (e: React.FormEvent) => {
        e.preventDefault()
        
        try {
            const response = await fetch('/api/ratings', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    productId: product.id,
                    userId: user?.id,
                    rating,
                    comment
                }),
            })
            
            if (response.ok) {
                setShowRatingForm(false)
                setRating(0)
                setComment("")
            }
        } catch (error) {
            console.error('Error submitting rating:', error)
        }
    }

    return (
        <div className="container mx-auto px-4 py-8">
            {/* Rest of the existing code remains unchanged */}
            
            {/* Add Rating Form Section */}
            {isSignedIn && (
                <div className="mt-8 max-w-6xl mx-auto bg-white rounded-xl shadow-lg overflow-hidden p-6">
                    <button
                        onClick={() => setShowRatingForm(!showRatingForm)}
                        className="text-teal-600 hover:text-teal-800 font-medium"
                    >
                        {showRatingForm ? 'Cancel Rating' : 'Rate This Tool'}
                    </button>

                    {showRatingForm && (
                        <form onSubmit={handleRatingSubmit} className="mt-4 space-y-4">
                            <div>
                                <label className="block text-sm text-gray-600">Rating</label>
                                <div className="flex space-x-1">
                                    {[1, 2, 3, 4, 5].map((star) => (
                                        <button
                                            key={star}
                                            type="button"
                                            onClick={() => setRating(star)}
                                            className={`${
                                                rating >= star ? 'text-yellow-400' : 'text-gray-300'
                                            }`}
                                        >
                                            <svg
                                                className="w-6 h-6"
                                                fill="currentColor"
                                                viewBox="0 0 20 20"
                                            >
                                                <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                                            </svg>
                                        </button>
                                    ))}
                                </div>
                            </div>
                            <div>
                                <label className="block text-sm text-gray-600">Comment</label>
                                <textarea
                                    value={comment}
                                    onChange={(e) => setComment(e.target.value)}
                                    className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-teal-500 focus:ring-teal-500 sm:text-sm"
                                    rows={3}
                                />
                            </div>
                            <button
                                type="submit"
                                className="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-teal-600 hover:bg-teal-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-teal-500"
                            >
                                Submit Review
                            </button>
                        </form>
                    )}
                </div>
            )}

            {/* Rest of the existing code remains unchanged */}
        </div>
    )
}

// For static rendering with dynamic params
export async function generateStaticParams() {
    // Dummy product IDs for development
    const products = [
        { id: '1' },
        { id: '2' },
        { id: '3' }
    ]

    return products.map((product) => ({
        id: product.id.toString(),
    }))
}
